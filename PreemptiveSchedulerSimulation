import java.util.Random;

public class PreemptiveSchedulerSimulation {
    public static void main(String[] args) {
        // Cria o escalonador de CPU
        CPUScheduler scheduler = new CPUScheduler();
        Random random = new Random();

        System.out.println("===== SIMULADOR DE ESCALONAMENTO PREEMPTIVO COM PRIORIDADE ESTÁTICA =====");

        // Cria processos com prioridades e tempos de execução diferentes
        System.out.println("Criando processos com diferentes prioridades...");

        try {
            Thread.sleep(1000); // Pausa um pouco para melhor visualização
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Criação de processos - 10 processos com tempos de chegada, prioridades e tempos de burst diferentes
        // Agora com prioridade invertida (número maior = maior prioridade)
        scheduler.addProcess(new Process(1, "P1", 3, 10, 0));   // Prioridade 3, tempo de burst 10, chegada no tempo 0
        scheduler.addProcess(new Process(2, "P2", 5, 6, 2));    // Prioridade 5, tempo de burst 6, chegada no tempo 2
        scheduler.addProcess(new Process(3, "P3", 2, 8, 4));    // Prioridade 2, tempo de burst 8, chegada no tempo 4
        scheduler.addProcess(new Process(4, "P4", 4, 9, 6));    // Prioridade 4, tempo de burst 9, chegada no tempo 6
        scheduler.addProcess(new Process(5, "P5", 1, 5, 8));    // Prioridade 1, tempo de burst 5, chegada no tempo 8
        scheduler.addProcess(new Process(6, "P6", 4, 7, 10));   // Prioridade 4, tempo de burst 7, chegada no tempo 10
        scheduler.addProcess(new Process(7, "P7", 3, 4, 12));   // Prioridade 3, tempo de burst 4, chegada no tempo 12
        scheduler.addProcess(new Process(8, "P8", 5, 10, 14));  // Prioridade 5, tempo de burst 10, chegada no tempo 14
        scheduler.addProcess(new Process(9, "P9", 2, 6, 16));   // Prioridade 2, tempo de burst 6, chegada no tempo 16
        scheduler.addProcess(new Process(10, "P10", 4, 5, 18)); // Prioridade 4, tempo de burst 5, chegada no tempo 18

        System.out.println("10 Processos criados com sucesso! Yay!\n");
        System.out.println("Iniciando simulação...\n");

        try {
            Thread.sleep(2000); // Pausa antes de iniciar a simulação
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Executa a simulação com quantum de tempo e velocidade de simulação (em milissegundos)
        scheduler.simulate(1, 5000); // Quantum de tempo de 1, atraso de 500ms para visualização
    }
}
